import os
import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import InputFile
from docx import Document
from pydub import AudioSegment
import openai

# أخذ التوكن من Environment Variables
TOKEN = os.getenv("TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(level=logging.INFO)

def start(update, context):
    update.message.reply_text("👋 اهلا! ارسل ملف صوتي أو فويس حتى احوله إلى نص داخل ملف Word.")

def voice_handler(update, context):
    file = update.message.voice or update.message.audio
    if not file:
        update.message.reply_text("❌ لازم ترسل ملف صوتي.")
        return

    file_path = file.get_file().download("input.ogg")

    # تحويل إلى mp3
    sound = AudioSegment.from_file("input.ogg")
    sound.export("input.mp3", format="mp3")

    # تحويل الصوت إلى نص باستخدام Whisper
    with open("input.mp3", "rb") as audio_file:
        transcript = openai.Audio.transcriptions.create(
            model="whisper-1",
            file=audio_file,
            response_format="text",
            language="ar"
        )

    text = transcript.strip()

    # حفظ النص في Word
    doc = Document()
    doc.add_paragraph(text)
    output_path = "output.docx"
    doc.save(output_path)

    # إرسال الملف
    with open(output_path, "rb") as f:
        update.message.reply_document(document=InputFile(f, filename="transcribed.docx"),
                                      caption="✅ تم تحويل الصوت إلى نص Word")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.voice | Filters.audio, voice_handler))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
